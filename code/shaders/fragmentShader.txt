#version 330
in vec4 vert_Normal;
in vec4 vert_pos;
out vec4 out_Color;
uniform vec3 lPos;
uniform vec3 bulbPosition;
uniform vec3 bulbRotation;
uniform mat4 mv_Mat;
uniform vec4 color;
uniform float bulbPower;
uniform float moonPower;
uniform vec3 cameraP;
vec3 lightColorMoon = vec3(0.529f,0.8f,0.9f);
vec3 lightColorBulb = vec3(0.5f,0.5f,0.f);
float maxDist = 5;
float ambientStrenght = 0.1f;
vec3 ambientColor = vec3(0.529f,0.529f,0.529f);

void main() {
	vec3 ambient = ambientColor.rgb * ambientStrenght;

	vec3 normal = normalize(vert_Normal.xyz);
	vec3 lightDirMoon = normalize(lPos.xyz);
	vec4 lightDirBulb = vec4(normalize(bulbPosition.xyz + bulbRotation.xyz), 0.0f);

	float diffMoon = max(dot(normal, lightDirMoon), 0.0);
	float diffBulb = max(dot(normal, lightDirBulb.xyz), 0.0);

	if(diffMoon < 0.2)
		diffMoon = 0;
	else if(diffMoon >=0.2 && diffMoon <= 0.4)
		diffMoon = 0.2;
	else if (diffMoon >= 0.4 && diffMoon <= 0.5 )
		diffMoon = 0.4;
	else if (diffMoon >= 0.5)
		diffMoon = 1;
	if(diffBulb < 0.2)
		diffBulb = 0;
	else if(diffBulb >=0.2 && diffBulb <= 0.4)
		diffBulb = 0.2;
	else if (diffBulb >= 0.4 && diffBulb <= 0.5 )
		diffBulb = 0.4;
	else if (diffBulb >= 0.5)
		diffBulb = 1;

	vec3 diffuseMoon = diffMoon * lightColorMoon * moonPower;
	
	vec3 diffuse = diffuseMoon;
	vec4 v = vec4(normalize(cameraP - vert_pos.xyz), 0.0);
	vec4 r = reflect(-lightDirBulb, vert_Normal);
	
	float dist = length(bulbPosition.xyz);
	dist /= maxDist;
	dist = abs(dist);
	dist = clamp(dist, 0,1);
	
	float spec = pow(max(dot(v,r), 0.0), 32);
	if(spec > 0.5)
		spec = 1;
	else if(spec <= 0.5)
		spec = 0;
	vec3 specular = 20 * spec * lightColorBulb * bulbPower * dist;

	vec3 result = (ambient + diffuse + specular) * color.xyz;
	out_Color = vec4(result, 1.0);
}


